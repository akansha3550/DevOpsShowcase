name: CD - Deploy to Kubernetes

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Save SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Load IPVS kernel modules on EC2 node
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo modprobe ip_vs
            sudo modprobe ip_vs_rr
            sudo modprobe ip_vs_wrr
            sudo modprobe ip_vs_sh
            sudo modprobe nf_conntrack
          EOF

      - name: Deploy to EC2 Server
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Setting kubeconfig"
            export KUBECONFIG=/home/ubuntu/k3s.yaml

            echo "Waiting for Kubernetes API server to be ready"
            until kubectl get nodes &> /dev/null; do
              echo "Kubernetes API server is not ready yet. Waiting..."
              sleep 5
            done

            echo "Deploying RBAC resources"
            kubectl apply --insecure-skip-tls-verify --validate=false -f /home/ubuntu/DevOpsShowcase/k8s/rbac/
            
            echo "Deploying Kubernetes manifests"
            kubectl apply --insecure-skip-tls-verify --validate=false -R -f /home/ubuntu/DevOpsShowcase/k8s/

            echo "Waiting for Traefik to be ready"
            kubectl rollout status deployment/traefik -n kube-system --timeout=120s

            echo "Restarting frontend deployment"
            kubectl rollout restart deployment frontend-deployment

            echo "Deploying ELK stack"
            kubectl create namespace logging --dry-run=client -o yaml | kubectl apply -f -
            kubectl apply --insecure-skip-tls-verify --validate=false -R -f /home/ubuntu/DevOpsShowcase/k8s/logging/


          EOF
